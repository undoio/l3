name: Build and test
on: [pull_request]

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        build_type: [release, debug]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive
    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y pylint
        set -x
        echo " "
        which pylint

        echo " "
        ls -aFlrt
        echo " "

    #! -------------------------------------------------------------------------
    - name: test-test-sh-usages
      run: |
        ./test.sh --help
        ./test.sh --list

    #! -------------------------------------------------------------------------
    - name: test-code-formatting
      run: |
        ./test.sh test-pylint-check
        shellcheck ./test.sh

    #! -------------------------------------------------------------------------
    - name: test-make-help
      run: ./test.sh test-make-help

    #! -------------------------------------------------------------------------
    - name: test-build-and-run-unit-tests
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-unit-tests

    - name: test-build-C-samples
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-C-samples

    - name: test-run-C-samples
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-run-C-samples

    - name: test-build-Cpp-samples
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-Cpp-samples

    - name: test-run-Cpp-samples
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-run-Cpp-samples

    - name: test-build-Cc-samples
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-Cc-samples

    - name: test-run-Cc-samples
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-run-Cc-samples

    # -------------------------------------------------------------------------
    - name: test-build-and-run-C-samples-with-LOC
      run: |
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-C-samples-with-LOC

    - name: test-run-C-samples-with-LOC-wo-L3_LOC_ENABLED
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-run-C-samples-with-LOC-wo-L3_LOC_ENABLED

    # NOTE: This test should occur immediately after previous one.
    - name: test-l3_dump_py-missing-loc_decoder
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-l3_dump_py-missing-loc_decoder

    # -------------------------------------------------------------------------
    - name: test-build-and-run-Cpp-samples-with-LOC
      run: |
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-Cpp-samples-with-LOC

    - name: test-run-Cpp-samples-with-LOC-wo-L3_LOC_ENABLED
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-run-Cpp-samples-with-LOC-wo-L3_LOC_ENABLED

    # -------------------------------------------------------------------------
    - name: test-build-and-run-Cc-samples-with-LOC
      run: |
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-Cc-samples-with-LOC

    - name: test-run-Cc-samples-with-LOC-wo-L3_LOC_ENABLED
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-run-Cc-samples-with-LOC-wo-L3_LOC_ENABLED

    # -------------------------------------------------------------------------
    - name: test-build-and-run-LOC-unit-test
      run: |
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-LOC-unit-test

    # -------------------------------------------------------------------------
    # For easier debugging: run following LOC-ELF build-and-test jobs with
    # verbose Make outputs: BUILD_VERBOSE=1
    - name: test-build-and-run-C-samples-with-LOC-ELF
      run: |
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-C-samples-with-LOC-ELF

    # -------------------------------------------------------------------------
    - name: test-build-and-run-Cpp-samples-with-LOC-ELF
      run: |
        # Do 'clean' here rather than 'clean-l3', so we do full rebuilds
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-Cpp-samples-with-LOC-ELF

    # -------------------------------------------------------------------------
    - name: test-build-and-run-Cc-samples-with-LOC-ELF
      run: |
        # Do 'clean' here rather than 'clean-l3', so we do full rebuilds
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-Cc-samples-with-LOC-ELF

    # -------------------------------------------------------------------------
    # Exercise the --from-test interface to verify that it still works to
    # run thru last pair of code-formatting tests. (Minor duplication of
    # these two low-impact tests.)
    # -------------------------------------------------------------------------
    - name: test-from-test-interface
      run: ./test.sh --from-test test-pylint-check
