name: L3-Build and test
on: [pull_request]

#! -----------------------------------------------------------------------------
# Ref: For running jobs on Linux & Mac/OSX with one workflow.
# https://stackoverflow.com/questions/57946173/github-actions-run-step-on-specific-os
#! -----------------------------------------------------------------------------
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [release, debug]

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Install dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update -y
            sudo apt-get install -y pylint pip

        elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install python
            brew install pylint

            # To install llvm-readelf
            brew install llvm
        fi

        pip install pytest

        set -x
        echo " "
        which pylint
        which pytest

        echo " "
        ls -aFlrt
        echo " "

    #! -------------------------------------------------------------------------
    - name: Update PATH
      run: |
        # This is the $PATH reported by `brew install` for the new binaries
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "/opt/homebrew/opt/llvm/bin" >> $GITHUB_PATH
        fi

    - name: Verify PATH and required readelf binary
      run: |
            echo "PATH is $PATH"

            # Verify that this required binary is found in $PATH
            if [ "$RUNNER_OS" == "Linux" ]; then
                which readelf
            elif [ "$RUNNER_OS" == "macOS" ]; then
                which llvm-readelf
            fi

    #! -------------------------------------------------------------------------
    - name: test-test-sh-usages
      run: |
        ./test.sh --help
        ./test.sh --list

    #! -------------------------------------------------------------------------
    - name: test-code-formatting
      run: |
        ./test.sh test-pylint-check

        # Skip shellcheck on MacOSX. It's throwing up some weird errors!
        if [ "$RUNNER_OS" == "Linux" ]; then
            shellcheck ./test.sh
        fi

    #! -------------------------------------------------------------------------
    - name: test-pytests
      run: |
        ./test.sh test-pytests

    #! -------------------------------------------------------------------------
    - name: test-make-help
      run: ./test.sh test-make-help

    #! -------------------------------------------------------------------------
    - name: test-build-and-run-unit-tests
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-unit-tests

    - name: test-build-C-samples
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-C-samples

    - name: test-run-C-samples
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-run-C-samples

    - name: test-build-Cpp-samples
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-Cpp-samples

    - name: test-run-Cpp-samples
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-run-Cpp-samples

    - name: test-build-Cc-samples
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-Cc-samples

    - name: test-run-Cc-samples
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-run-Cc-samples

    # -------------------------------------------------------------------------
    - name: test-build-and-run-C-samples-with-LOC
      run: |
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-C-samples-with-LOC

    - name: test-run-C-samples-with-LOC-wo-L3_LOC_ENABLED
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-run-C-samples-with-LOC-wo-L3_LOC_ENABLED

    # NOTE: This test should occur immediately after previous one.
    - name: test-l3_dump_py-missing-loc_decoder
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-l3_dump_py-missing-loc_decoder

    # -------------------------------------------------------------------------
    - name: test-build-and-run-Cpp-samples-with-LOC
      run: |
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-Cpp-samples-with-LOC

    - name: test-run-Cpp-samples-with-LOC-wo-L3_LOC_ENABLED
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-run-Cpp-samples-with-LOC-wo-L3_LOC_ENABLED

    # -------------------------------------------------------------------------
    - name: test-build-and-run-Cc-samples-with-LOC
      run: |
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-Cc-samples-with-LOC

    - name: test-run-Cc-samples-with-LOC-wo-L3_LOC_ENABLED
      run: BUILD_MODE=${{ matrix.build_type }} ./test.sh test-run-Cc-samples-with-LOC-wo-L3_LOC_ENABLED

    # -------------------------------------------------------------------------
    - name: test-build-and-run-LOC-unit-test
      run: |
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-LOC-unit-test

    # -------------------------------------------------------------------------
    # For easier debugging: run following LOC-ELF build-and-test jobs with
    # verbose Make outputs: BUILD_VERBOSE=1
    - name: test-build-and-run-C-samples-with-LOC-ELF
      run: |
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-C-samples-with-LOC-ELF

    # -------------------------------------------------------------------------
    - name: test-build-and-run-Cpp-samples-with-LOC-ELF
      run: |
        # Do 'clean' here rather than 'clean-l3', so we do full rebuilds
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-Cpp-samples-with-LOC-ELF

    # -------------------------------------------------------------------------
    - name: test-build-and-run-Cc-samples-with-LOC-ELF
      run: |
        # Do 'clean' here rather than 'clean-l3', so we do full rebuilds
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-Cc-samples-with-LOC-ELF

    # -------------------------------------------------------------------------
    # These tests exercise Makefile rules to build-and-run very simple sample
    # programs.
    - name: test-build-and-run-sample-c-appln
      run: |
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-sample-c-appln

    # -------------------------------------------------------------------------
    - name: test-build-and-run-sample-c-appln-with-LOC
      run: |
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-sample-c-appln-with-LOC

    #! -------------------------------------------------------------------------
    #  This test will build-and-run client-server perf-test, with L3-Logging OFF
    #  (baseline) and L3-Logging ON.
    #! -------------------------------------------------------------------------
    - name: test-build-and-run-client-server-perf-test
      run: |
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-client-server-perf-test

    #! -------------------------------------------------------------------------
    #  This test will build-and-run client-server perf-test, with L3-Logging
    #  ON + L3-LOC encoding scheme ON.
    #! -------------------------------------------------------------------------
    - name: test-build-and-run-client-server-perf-test-l3_loc_eq_1
      run: |
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-client-server-perf-test-l3_loc_eq_1

    #! -------------------------------------------------------------------------
    #  This test will build-and-run client-server perf-test, with L3-Logging
    #  ON + L3-LOC-ELF encoding scheme ON.
    #! -------------------------------------------------------------------------
    - name: test-build-and-run-client-server-perf-test-l3_loc_eq_2
      run: |
        BUILD_MODE=${{ matrix.build_type }} ./test.sh test-build-and-run-client-server-perf-test-l3_loc_eq_2

    # -------------------------------------------------------------------------
    # Exercise the --from-test interface to verify that it still works to
    # run thru last pair of code-formatting tests. (Minor duplication of
    # these two low-impact tests.)
    # -------------------------------------------------------------------------
    - name: test-from-test-interface
      run: ./test.sh --from-test test-pylint-check
