name: Build and test
on: [pull_request]

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        build_type: [release, debug]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive
    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y pylint
        set -x
        echo " "
        which pylint

        echo " "
        ls -aFlrt
        echo " "

    - name: Makefile-help
      run: make help

    - name: Build-and-Run-Unit-tests
      run: BUILD_MODE=${{ matrix.build_type }} make clean && BUILD_MODE=${{ matrix.build_type }} CC=gcc LD=g++ make run-unit-tests

    - name: Build-C-Samples
      run: BUILD_MODE=${{ matrix.build_type }} make clean && BUILD_MODE=${{ matrix.build_type }} CC=gcc LD=g++ make all-c-tests

    - name: Test-C-Samples
      run: BUILD_MODE=${{ matrix.build_type }} make run-c-tests

    - name: Build-Cpp-Samples
      run: BUILD_MODE=${{ matrix.build_type }} make clean-l3 && BUILD_MODE=${{ matrix.build_type }} CC=g++ CXX=g++ LD=g++ make all-cpp-tests

    - name: Test-Cpp-Samples
      run: BUILD_MODE=${{ matrix.build_type }} make run-cpp-tests

    - name: Build-CC-Samples
      run: BUILD_MODE=${{ matrix.build_type }} make clean-l3 && BUILD_MODE=${{ matrix.build_type }} CC=g++ CXX=g++ LD=g++ make all-cc-tests

    - name: Test-CC-Samples
      run: BUILD_MODE=${{ matrix.build_type }} make run-cc-tests

    # -------------------------------------------------------------------------
    - name: Build-and-Run-C-Samples-with-LOC
      run: |
        BUILD_MODE=${{ matrix.build_type }} make clean
        BUILD_MODE=${{ matrix.build_type }} CC=gcc LD=g++ L3_LOC_ENABLED=1 make run-c-tests

    # Just re-run the tests on data that was generated with LOC-enabled, but
    # without the required env-var. This should exercise code in the Python
    # dump script to skip decoding LOC-ID values.
    # You need to execute this run tests target immediately after doing the
    # build; otherwise, other test execution commands will `clean` stuff
    # which will cause this run to need re-builds.
    - name: Run-C-Samples-with-LOC-wo-L3_LOC_ENABLED
      run: BUILD_MODE=${{ matrix.build_type }} CC=gcc LD=g++ make run-c-tests

    # -------------------------------------------------------------------------
    - name: Build-and-Run-Cpp-Samples-with-LOC
      run: |
        BUILD_MODE=${{ matrix.build_type }} make clean-l3
        BUILD_MODE=${{ matrix.build_type }} CC=g++ CXX=g++ LD=g++ L3_LOC_ENABLED=1 make run-cpp-tests

    - name: Run-Cpp-Samples-with-LOC-wo-L3_LOC_ENABLED
      run: BUILD_MODE=${{ matrix.build_type }} CC=g++ CXX=g++ LD=g++ make run-cpp-tests

    # -------------------------------------------------------------------------
    - name: Build-and-Run-CC-Samples-with-LOC
      run: |
        BUILD_MODE=${{ matrix.build_type }} make clean-l3
        BUILD_MODE=${{ matrix.build_type }} CC=g++ CXX=g++ LD=g++ L3_LOC_ENABLED=1 make run-cc-tests

    - name: Run-CC-Samples-with-LOC-wo-L3_LOC_ENABLED
      run: BUILD_MODE=${{ matrix.build_type }} CC=g++ CXX=g++ LD=g++ make run-cc-tests

    # -------------------------------------------------------------------------
    - name: Build-and-Run-LOC-unit-test
      run: |
        BUILD_MODE=${{ matrix.build_type }} make clean
        BUILD_MODE=${{ matrix.build_type }} CC=g++ CXX=g++ LD=g++ BUILD_VERBOSE=1 L3_LOC_ENABLED=2 make run-loc-tests

    # -------------------------------------------------------------------------
    # For easier debugging: run following LOC-ELF build-and-test jobs with
    # verbose Make outputs: BUILD_VERBOSE=1
    - name: Build-and-Run-C-Samples-with-LOC-ELF
      run: |
        BUILD_MODE=${{ matrix.build_type }} make clean
        BUILD_MODE=${{ matrix.build_type }} CC=gcc LD=g++ BUILD_VERBOSE=1 L3_LOC_ENABLED=2 make run-c-tests

    # -------------------------------------------------------------------------
    - name: Build-and-Run-Cpp-Samples-with-LOC-ELF
      run: |
        # Do 'clean' here rather than 'clean-l3', so we do full rebuilds
        BUILD_MODE=${{ matrix.build_type }} make clean
        BUILD_MODE=${{ matrix.build_type }} CC=g++ CXX=g++ LD=g++ BUILD_VERBOSE=1 L3_LOC_ENABLED=2 make run-cpp-tests

    # -------------------------------------------------------------------------
    - name: Build-and-Run-CC-Samples-with-LOC-ELF
      run: |
        # Do 'clean' here rather than 'clean-l3', so we do full rebuilds
        BUILD_MODE=${{ matrix.build_type }} make clean
        BUILD_MODE=${{ matrix.build_type }} CC=g++ CXX=g++ LD=g++ BUILD_VERBOSE=1 L3_LOC_ENABLED=2 make run-cc-tests
